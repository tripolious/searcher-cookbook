package main

import (
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/rpc"
	"log"
	"math/big"
	"os"
	"strings"
)

type OverwriteData map[common.Address]OverwriteCode
type OverwriteCode struct {
	Code string `json:"code"`
}
type Request struct {
	To   string `json:"to"`
	Data string `json:"data"`
}

func main() {
	rpcUrl := os.Getenv("RPC_MAINNET")
	if rpcUrl == "" {
		log.Fatalln("need RPC_MAINNET env")
	}

	_client, err := rpc.Dial(rpcUrl)
	if err != nil {
		log.Fatal(err)
	}

	checkAmounts := getAmountsToCheck()

	_data := make([]*big.Int, 4)
	_data[0] = math.MustParseBig256("0xbac293e8951fe43f1087cef98435890ffc702b9d0000")
	_data[1] = math.MustParseBig256("0x2979fa622ccb9f6b8925ca831f30c405077730c6011e")
	_data[2] = math.MustParseBig256("0x1d42064fc4beb5f8aaf85f4617ae8b3b5b8bd8010000")
	_data[3] = math.MustParseBig256("0xd3d2e2692501a5c9ca623199d38826e513033a17011e")

	contractAbi, err := abi.JSON(strings.NewReader(getAbi()))
	if err != nil {
		log.Fatal(err)
	}

	fakeAddr := common.HexToAddress("0xb5eb793d3865628605dD9E0B06E399D187dbc258")

	contrCall, err := contractAbi.Pack("calc", checkAmounts, _data)
	if err != nil {
		log.Fatal(err)
	}

	var result hexutil.Bytes
	var overWriteData = make(OverwriteData, 1)
	overWriteData[fakeAddr] = OverwriteCode{
		Code: getByteCode(),
	}

	req := Request{
		To:   fakeAddr.String(),
		Data: "0x" + common.Bytes2Hex(contrCall),
	}

	// we use block 15219623 (0xE83BA7) to simulate our test
	if err := _client.Call(&result, "eth_call", req, "0xE83BA7", overWriteData); err != nil {
		log.Fatalf("err in eth_call: %s", err)
	}

	res, err := contractAbi.Unpack("calc", result)
	if err != nil {
		log.Fatalf("error in unpacking calc: %s", err)
	}

	tradeAmounts := res[0].([]*big.Int)

	tradeCounter := 1
	for i := 1; i < len(tradeAmounts); i = i + 3 {
		startAmount := tradeAmounts[i-1]
		//amountOut1 := tradeAmounts[i]
		amountOut2 := tradeAmounts[i+1]

		info := "NOT "
		if startAmount.Cmp(amountOut2) == -1 {
			info = ""
		}
		log.Printf("Trade %d %s (%sprofitable)", tradeCounter, big.NewInt(0).Sub(amountOut2, startAmount), info)

		tradeCounter++
	}
}

func getAmountsToCheck() []*big.Int {
	amounts := make([]*big.Int, 7)
	amounts[0] = math.MustParseBig256("1000000000000000")    // 0.001 eth
	amounts[1] = math.MustParseBig256("5000000000000000")    // 0.005 eth
	amounts[2] = math.MustParseBig256("10000000000000000")   // 0.01 eth
	amounts[3] = math.MustParseBig256("50000000000000000")   // 0.05 eth
	amounts[4] = math.MustParseBig256("100000000000000000")  // 0.1 eth
	amounts[5] = math.MustParseBig256("500000000000000000")  // 0.5 eth
	amounts[6] = math.MustParseBig256("1000000000000000000") // 1 eth

	return amounts
}

func getByteCode() string {
	return `0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063f8807d6c1461003b578063fa461e3314610064575b600080fd5b61004e610049366004610753565b610079565b60405161005b91906107bf565b60405180910390f35b610077610072366004610819565b610345565b005b60606100866002836108f3565b6100909083610915565b67ffffffffffffffff8111156100a8576100a8610803565b6040519080825280602002602001820160405280156100d1578160200160208202803683370190505b509050600f600083815b818110156103395783600f0361013f5760009350888860008181106101025761010261092d565b905060200201358584836101169190610915565b815181106101265761012661092d565b60209081029190910101528261013b81610943565b9350505b6101918787838181106101545761015461092d565b90506020020135866001868561016a9190610915565b610174919061095c565b815181106101845761018461092d565b60200260200101516103b3565b8561019c8584610915565b815181106101ac576101ac61092d565b6020908102919091010152836101c181610943565b9450508360020361031d57600f9350888860008181106101e3576101e361092d565b905060200201358584836101f79190610915565b815181106102075761020761092d565b6020026020010151111561031d5761028f8989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92508a915061025b905060018661095c565b81811061026a5761026a61092d565b905060200201358989858181106102835761028361092d565b90506020020135610409565b87600261029c8887610915565b6102a6919061095c565b815181106102b6576102b661092d565b6020026020010188600188876102cc9190610915565b6102d6919061095c565b815181106102e6576102e661092d565b602002602001018988876102fa9190610915565b8151811061030a5761030a61092d565b6020908102919091010192909252919052525b8061032781610943565b91506103339082610915565b506100db565b50505050949350505050565b60008313806103545750600082135b61035d57600080fd5b6000818060200190518101906103739190610973565b90506000806000861361038f578461038a8761098c565b610399565b856103998661098c565b915091508282146103a8575060005b604051818152602081fd5b6000601083901c60ff80851690600886901c168184036103df576103d8858483610529565b9350610400565b6000806103ec8584610657565b6127108681038a0292028201910204955050505b50505092915050565b600080600080600080886000815181106104255761042561092d565b60200260200101519550600094506000935060005b895181101561051c57610459898b83815181106101845761018461092d565b925061046588846103b3565b91508981815181106104795761047961092d565b6020026020010151821180156104b25750838a828151811061049d5761049d61092d565b6020026020010151836104b0919061095c565b115b15610505578981815181106104c9576104c961092d565b6020026020010151826104dc919061095c565b93508295508194508981815181106104f6576104f661092d565b6020026020010151965061050a565b61051c565b8061051481610943565b91505061043a565b5050505093509350939050565b6000808261054b5773fffd8963efd1fc6a506488495d951d5263988d25610552565b6401000276a45b9050836001600160a01b031663128acb08308588858a60405160200161057a91815260200190565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016105a99594939291906109a8565b60408051808303816000875af19250505080156105e3575060408051601f3d908101601f191682019092526105e091810190610a29565b60015b610648573d808015610611576040519150601f19603f3d011682016040523d82523d6000602084013e610616565b606091505b50805160201461062b57600092505050610650565b8080602001905181019061063f9190610973565b92505050610650565b505060009150505b9392505050565b600080600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610a69565b9150915084156106e557816001600160701b03169350806001600160701b031692506106fe565b806001600160701b03169350816001600160701b031692505b50509250929050565b60008083601f84011261071957600080fd5b50813567ffffffffffffffff81111561073157600080fd5b6020830191508360208260051b850101111561074c57600080fd5b9250929050565b6000806000806040858703121561076957600080fd5b843567ffffffffffffffff8082111561078157600080fd5b61078d88838901610707565b909650945060208701359150808211156107a657600080fd5b506107b387828801610707565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156107f7578351835292840192918401916001016107db565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561082e57600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561085457600080fd5b818601915086601f83011261086857600080fd5b81358181111561087a5761087a610803565b604051601f8201601f19908116603f011681019083821181831017156108a2576108a2610803565b816040528281528960208487010111156108bb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052601160045260246000fd5b60008261091057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610928576109286108dd565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201610955576109556108dd565b5060010190565b60008282101561096e5761096e6108dd565b500390565b60006020828403121561098557600080fd5b5051919050565b6000600160ff1b82016109a1576109a16108dd565b5060000390565b600060018060a01b038088168352602087151581850152866040850152818616606085015260a06080850152845191508160a085015260005b828110156109fd5785810182015185820160c0015281016109e1565b82811115610a0f57600060c084870101525b5050601f01601f19169190910160c0019695505050505050565b60008060408385031215610a3c57600080fd5b505080516020909101519092909150565b80516001600160701b0381168114610a6457600080fd5b919050565b60008060408385031215610a7c57600080fd5b610a8583610a4d565b9150610a9360208401610a4d565b9050925092905056fea26469706673582212202562aa7bc1f7af2616586847a9640424cb59edc26dbcfcb5907658434824948a64736f6c634300080f0033`
}

func getAbi() string {
	return `[
		{
		  "inputs": [
			{
			  "internalType": "uint256[]",
			  "name": "checkAmounts",
			  "type": "uint256[]"
			},
			{
			  "internalType": "uint256[]",
			  "name": "_data",
			  "type": "uint256[]"
			}
		  ],
		  "name": "calc",
		  "outputs": [
			{
			  "internalType": "uint256[]",
			  "name": "amounts",
			  "type": "uint256[]"
			}
		  ],
		  "stateMutability": "nonpayable",
		  "type": "function"
		},
		{
		  "inputs": [
			{
			  "internalType": "int256",
			  "name": "amount0Delta",
			  "type": "int256"
			},
			{
			  "internalType": "int256",
			  "name": "amount1Delta",
			  "type": "int256"
			},
			{
			  "internalType": "bytes",
			  "name": "data",
			  "type": "bytes"
			}
		  ],
		  "name": "uniswapV3SwapCallback",
		  "outputs": [],
		  "stateMutability": "pure",
		  "type": "function"
		}
  	]`
}
